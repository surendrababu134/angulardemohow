{"version":3,"file":"ng-treetable.umd.min.js","sources":["../../out-tsc/lib/src/component/shared.ts","../../out-tsc/lib/src/component/treerow.ts","../../out-tsc/lib/src/component/paginator.ts","../../out-tsc/lib/src/component/treetable.ts"],"sourcesContent":["/**\r\n * Created by andrew.yang on 3/22/2017.\r\n */\r\nimport {NgModule,EventEmitter,Directive,ViewContainerRef,Input,Output,ContentChildren,ContentChild,TemplateRef,OnInit,OnDestroy,AfterContentInit,QueryList,EmbeddedViewRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ay-header',\r\n    template: '<ng-content></ng-content>'\r\n})\r\nexport class Header {}\r\n\r\n@Component({\r\n    selector: 'ay-footer',\r\n    template: '<ng-content></ng-content>'\r\n})\r\nexport class Footer {}\r\n\r\n@Directive({\r\n    selector: '[pTemplate]',\r\n    host: {\r\n    }\r\n})\r\nexport class PrimeTemplate {\r\n\r\n    @Input() type: string;\r\n\r\n    @Input('pTemplate') name: string;\r\n\r\n    constructor(public template: TemplateRef<any>) {}\r\n\r\n    getType(): string {\r\n        if(this.type) {\r\n            console.log('Defining a pTemplate with type property is deprecated use pTemplate=\"type\" instead.');\r\n            return this.type;\r\n        }\r\n        else {\r\n            return this.name;\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pTemplateWrapper]'\r\n})\r\nexport class TemplateWrapper implements OnInit, OnDestroy {\r\n\r\n    @Input() item: any;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input('pTemplateWrapper') templateRef: TemplateRef<any>;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.templateRef, {\r\n            '\\$implicit': this.item,\r\n            'index': this.index\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-column',\r\n    template: ``\r\n})\r\nexport class Column implements AfterContentInit{\r\n    @Input() field: string;\r\n    @Input() sortField: string;\r\n    @Input() header: string;\r\n    @Input() footer: string;\r\n    @Input() sortable: any;\r\n    @Input() editable: boolean;\r\n    @Input() filter: boolean;\r\n    @Input() filterMatchMode: string;\r\n    @Input() rowspan: number;\r\n    @Input() colspan: number;\r\n    @Input() style: any;\r\n    @Input() styleClass: string;\r\n    @Input() hidden: boolean;\r\n    @Input() expander: boolean;\r\n    @Input() selectionMode: string;\r\n    @Input() filterPlaceholder: string;\r\n    @Input() frozen: boolean;\r\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n    public headerTemplate: TemplateRef<any>;\r\n    public bodyTemplate: TemplateRef<any>;\r\n    public footerTemplate: TemplateRef<any>;\r\n    public filterTemplate: TemplateRef<any>;\r\n    public editorTemplate: TemplateRef<any>;\r\n\r\n    ngAfterContentInit():void {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                    break;\r\n\r\n                case 'filter':\r\n                    this.filterTemplate = item.template;\r\n                    break;\r\n\r\n                case 'editor':\r\n                    this.editorTemplate = item.template;\r\n                    break;\r\n\r\n                default:\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-row',\r\n    template: ``\r\n})\r\nexport class Row {\r\n\r\n    @ContentChildren(Column) columns: QueryList<Column>;\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-headerColumnGroup',\r\n    template: ``\r\n})\r\nexport class HeaderColumnGroup {\r\n\r\n    @ContentChildren(Row) rows: QueryList<any>;\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-footerColumnGroup',\r\n    template: ``\r\n})\r\nexport class FooterColumnGroup {\r\n\r\n    @ContentChildren(Row) rows: QueryList<any>;\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-columnBodyTemplateLoader',\r\n    template: ``\r\n})\r\nexport class ColumnBodyTemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() column: any;\r\n\r\n    @Input() rowData: any;\r\n\r\n    @Input() rowIndex: number;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.column.bodyTemplate, {\r\n            '\\$implicit': this.column,\r\n            'rowData': this.rowData,\r\n            'rowIndex': this.rowIndex\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-columnHeaderTemplateLoader',\r\n    template: ``\r\n})\r\nexport class ColumnHeaderTemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() column: any;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.column.headerTemplate, {\r\n            '\\$implicit': this.column\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-columnFooterTemplateLoader',\r\n    template: ``\r\n})\r\nexport class ColumnFooterTemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() column: any;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.column.footerTemplate, {\r\n            '\\$implicit': this.column\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-columnFilterTemplateLoader',\r\n    template: ``\r\n})\r\nexport class ColumnFilterTemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() column: any;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.column.filterTemplate, {\r\n            '\\$implicit': this.column\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-columnEditorTemplateLoader',\r\n    template: ``\r\n})\r\nexport class ColumnEditorTemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() column: any;\r\n\r\n    @Input() rowData: any;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.column.editorTemplate, {\r\n            '\\$implicit': this.column,\r\n            'rowData': this.rowData\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.view.destroy();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ay-templateLoader',\r\n    template: ``\r\n})\r\nexport class TemplateLoader implements OnInit, OnDestroy {\r\n\r\n    @Input() template: TemplateRef<any>;\r\n\r\n    @Input() data: any;\r\n\r\n    view: EmbeddedViewRef<any>;\r\n\r\n    constructor(public viewContainer: ViewContainerRef) {}\r\n\r\n    ngOnInit() {\r\n        if(this.template) {\r\n            this.view = this.viewContainer.createEmbeddedView(this.template, {\r\n                '\\$implicit': this.data\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.view) this.view.destroy();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Header,Footer,Column,TemplateWrapper,ColumnHeaderTemplateLoader,ColumnBodyTemplateLoader,ColumnFooterTemplateLoader,ColumnFilterTemplateLoader,PrimeTemplate,TemplateLoader,Row,HeaderColumnGroup,FooterColumnGroup,ColumnEditorTemplateLoader],\r\n    declarations: [Header,Footer,Column,TemplateWrapper,ColumnHeaderTemplateLoader,ColumnBodyTemplateLoader,ColumnFooterTemplateLoader,ColumnFilterTemplateLoader,PrimeTemplate,TemplateLoader,Row,HeaderColumnGroup,FooterColumnGroup,ColumnEditorTemplateLoader]\r\n})\r\nexport class TreeSharedModule { }","/**\r\n * Created by andrew.yang on 3/22/2017.\r\n */\r\nimport {Component, Input, OnInit, Inject, forwardRef, SimpleChanges} from \"@angular/core\";\r\nimport {TreeNode} from \"./model\";\r\nimport {TreeTable} from \"./treetable\";\r\n\r\n@Component({\r\n    selector: '[pTreeRow]',\r\n    template: `\r\n        <div *ngIf=\"treeTable.isFiltered(node)\" class=\"ui-treetable-row\" [class]=\"treeTable.getRowStyleClass(node)\"\r\n            [ngClass]=\"{'ui-state-highlight':isSelected() ,'ui-treetable-row-selectable':treeTable.selectionMode && node.selectable !== false}\">\r\n            <td *ngFor=\"let col of treeTable.columns; let i=index\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" \r\n            [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\r\n            (click)=\"onRowClick($event)\" (touchend)=\"onRowTouchEnd()\" (contextmenu)=\"onRowRightClick($event)\">\r\n                <a href=\"#\" *ngIf=\"i==0\" class=\"ui-treetable-toggler fa fa-fw ui-c\" [ngClass]=\"{'fa-caret-down':node.expanded,'fa-caret-right':!node.expanded}\"\r\n                    [ngStyle]=\"{'margin-left':level*16 + 'px','visibility': isLeaf() ? 'hidden' : 'visible'}\"\r\n                    (click)=\"toggle($event)\"\r\n                    [title]=\"node.expanded ? labelCollapse : labelExpand\">\r\n                </a>\r\n                <div class=\"ui-chkbox ui-treetable-checkbox\" *ngIf=\"treeTable.selectionMode == 'checkbox' && i==0\">\r\n                    <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\">\r\n                        <span class=\"ui-chkbox-icon ui-c fa\" \r\n                            [ngClass]=\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\"></span>\r\n                    </div>\r\n                </div>\r\n                <span *ngIf=\"!col.template\">{{resolveFieldData(node.data,col.field)}}</span>\r\n                <ay-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"node\" *ngIf=\"col.template\"></ay-columnBodyTemplateLoader>\r\n            </td>\r\n        </div>\r\n        <div *ngIf=\"node.children && node.expanded\" class=\"ui-treetable-row\" style=\"display:table-row;white-space: nowrap\">\r\n            <td [attr.colspan]=\"treeTable.shownColumns().length\" class=\"ui-treetable-child-table-container\">\r\n                <table>\r\n                    <tbody pTreeRow *ngFor=\"let childNode of node.children\" [node]=\"childNode\" [level]=\"level+1\" [labelExpand]=\"labelExpand\" [labelCollapse]=\"labelCollapse\" [parentNode]=\"node\"></tbody>\r\n                </table>\r\n            </td>\r\n        </div>\r\n    `\r\n})\r\nexport class UITreeRow implements OnInit {\r\n\r\n    @Input() node: TreeNode;\r\n\r\n    @Input() parentNode: TreeNode;\r\n\r\n    @Input() level: number = 0;\r\n\r\n    @Input() labelExpand: string = \"Expand\";\r\n\r\n    @Input() labelCollapse: string = \"Collapse\";\r\n\r\n    constructor(@Inject(forwardRef(() => TreeTable)) public treeTable:TreeTable) {}\r\n\r\n    ngOnInit() {\r\n        this.node.parent = this.parentNode;\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['node'] && this.node){\r\n        }\r\n    }\r\n    toggle(event: Event) {\r\n        if(this.node.expanded)\r\n            this.treeTable.onNodeCollapse.emit({originalEvent: event, node: this.node});\r\n        else\r\n            this.treeTable.onNodeExpand.emit({originalEvent: event, node: this.node});\r\n\r\n        this.node.expanded = !this.node.expanded;\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    isLeaf() {\r\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\r\n    }\r\n\r\n    isSelected() {\r\n        return this.treeTable.isSelected(this.node);\r\n    }\r\n\r\n    onRowClick(event: MouseEvent) {\r\n        this.treeTable.onRowClick(event, this.node);\r\n    }\r\n\r\n    onRowRightClick(event: MouseEvent) {\r\n        this.treeTable.onRowRightClick(event, this.node);\r\n    }\r\n\r\n    onRowTouchEnd() {\r\n        this.treeTable.onRowTouchEnd();\r\n    }\r\n\r\n    resolveFieldData(data: any, field: string): any {\r\n        if(data && field) {\r\n            if(field.indexOf('.') == -1) {\r\n                return data[field];\r\n            }\r\n            else {\r\n                let fields: string[] = field.split('.');\r\n                let value = data;\r\n                for(var i = 0, len = fields.length; i < len; ++i) {\r\n                    value = value[fields[i]];\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}","/**\r\n * Created by andrew.yang on 3/22/2017.\r\n */\r\nimport {NgModule,Component,ElementRef,Input,Output,SimpleChange,EventEmitter} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'ay-paginator',\r\n    template: `\r\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text'\">\r\n            <a href=\"#\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\r\n                    (click)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\r\n                <span class=\"fa fa-step-backward\"></span>\r\n            </a>\r\n            <a href=\"#\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\r\n                    (click)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\r\n                <span class=\"fa fa-backward\"></span>\r\n            </a>\r\n            <span class=\"ui-paginator-pages\">\r\n                <a href=\"#\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\r\n                    (click)=\"changePage(pageLink - 1, $event)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\r\n            </span>\r\n            <a href=\"#\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\r\n                    (click)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\r\n                <span class=\"fa fa-forward\"></span>\r\n            </a>\r\n            <a href=\"#\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\r\n                    (click)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\r\n                <span class=\"fa fa-step-forward\"></span>\r\n            </a>\r\n            <select class=\"ui-paginator-rpp-options ui-widget ui-state-default\" *ngIf=\"rowsPerPageOptions\" (change)=\"onRppChange($event)\">\r\n                <option *ngFor=\"let opt of rowsPerPageOptions\" [value]=\"opt\" [selected]=\"rows == opt\">{{opt}}</option>\r\n            </select>\r\n        </div>\r\n    `\r\n})\r\nexport class Paginator {\r\n\r\n    @Input() pageLinkSize: number = 5;\r\n\r\n    @Output() onPageChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() rowsPerPageOptions: number[];\r\n\r\n    public pageLinks: number[];\r\n\r\n    public _totalRecords: number = 0;\r\n\r\n    public _first: number = 0;\r\n\r\n    public _rows: number = 0;\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n\r\n    set totalRecords(val:number) {\r\n        this._totalRecords = val;\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    @Input() get first(): number {\r\n        return this._first;\r\n    }\r\n\r\n    set first(val:number) {\r\n        this._first = val;\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    @Input() get rows(): number {\r\n        return this._rows;\r\n    }\r\n\r\n    set rows(val:number) {\r\n        this._rows = val;\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    isFirstPage() {\r\n        return this.getPage() === 0;\r\n    }\r\n\r\n    isLastPage() {\r\n        return this.getPage() === this.getPageCount() - 1;\r\n    }\r\n\r\n    getPageCount() {\r\n        return Math.ceil(this.totalRecords/this.rows)||1;\r\n    }\r\n\r\n    calculatePageLinkBoundaries() {\r\n        let numberOfPages = this.getPageCount(),\r\n            visiblePages = Math.min(this.pageLinkSize, numberOfPages);\r\n\r\n        //calculate range, keep current in middle if necessary\r\n        let start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))),\r\n            end = Math.min(numberOfPages - 1, start + visiblePages - 1);\r\n\r\n        //check when approaching to last page\r\n        var delta = this.pageLinkSize - (end - start + 1);\r\n        start = Math.max(0, start - delta);\r\n\r\n        return [start, end];\r\n    }\r\n\r\n    updatePageLinks() {\r\n        this.pageLinks = [];\r\n        let boundaries = this.calculatePageLinkBoundaries(),\r\n            start = boundaries[0],\r\n            end = boundaries[1];\r\n\r\n        for(let i = start; i <= end; i++) {\r\n            this.pageLinks.push(i + 1);\r\n        }\r\n    }\r\n\r\n    changePage(p :number, event) {\r\n        var pc = this.getPageCount();\r\n\r\n        if(p >= 0 && p < pc) {\r\n            this.first = this.rows * p;\r\n            var state = {\r\n                page: p,\r\n                first: this.first,\r\n                rows: this.rows,\r\n                pageCount: pc\r\n            };\r\n            this.updatePageLinks();\r\n\r\n            this.onPageChange.emit(state);\r\n        }\r\n\r\n        if(event) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    getPage(): number {\r\n        return Math.floor(this.first / this.rows);\r\n    }\r\n\r\n    changePageToFirst(event) {\r\n        this.changePage(0, event);\r\n    }\r\n\r\n    changePageToPrev(event) {\r\n        this.changePage(this.getPage() - 1, event);\r\n    }\r\n\r\n    changePageToNext(event) {\r\n        this.changePage(this.getPage()  + 1, event);\r\n    }\r\n\r\n    changePageToLast(event) {\r\n        this.changePage(this.getPageCount() - 1, event);\r\n    }\r\n\r\n    onRppChange(event) {\r\n        this.rows = this.rowsPerPageOptions[event.target.selectedIndex];\r\n        this.changePageToFirst(event);\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Paginator],\r\n    declarations: [Paginator]\r\n})\r\nexport class PaginatorModule { }","/**\n * Created by andrew.yang on 3/22/2017.\n */\nimport {\n    NgModule, Component, Input, Output, EventEmitter, ContentChild, ContentChildren,\n    QueryList, Renderer2, SimpleChanges, OnInit\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Header, Footer, Column, TreeSharedModule} from './shared';\nimport {TreeNode} from \"./model\";\nimport {UITreeRow} from \"./treerow\";\nimport {PaginatorModule} from \"./paginator\";\nimport {AfterViewInit, OnChanges, OnDestroy} from \"@angular/core/src/metadata/lifecycle_hooks\";\n\n@Component({\n    selector: 'ay-treeTable',\n    template: `\n        <div [ngClass]=\"'ui-treetable ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-treetable-header ui-widget-header\" *ngIf=\"header\">\n                <ng-content select=\"ay-header\"></ng-content>\n            </div>\n            <div class=\"ui-treetable-tablewrapper\">\n                <table class=\"ui-widget-content\" [class]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <thead>\n                    <tr class=\"ui-state-default\">\n                        <th #headerCell *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\n                            [ngClass]=\"'ui-state-default ui-unselectable-text'\"\n                            [style.display]=\"col.hidden ? 'none' : 'table-cell'\">\n                            <span class=\"ui-column-title\" *ngIf=\"!col.headerTemplate\">{{col.header}}</span>\n                            <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\n                                    <ay-columnHeaderTemplateLoader [column]=\"col\"></ay-columnHeaderTemplateLoader>\n                                </span>\n                        </th>\n                    </tr>\n                    </thead>\n                    <tfoot *ngIf=\"hasFooter()\">\n                    <tr>\n                        <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\n                            [ngClass]=\"{'ui-state-default':true}\">\n                            <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\n                            <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\n                                    <ay-columnFooterTemplateLoader [column]=\"col\"></ay-columnFooterTemplateLoader>\n                                </span>\n                        </td>\n                    </tr>\n                    </tfoot>\n                    <tbody pTreeRow *ngFor=\"let node of dataToRender;let odd = odd;let even=even\"\n                           [node]=\"node\" [level]=\"0\"\n                           [labelExpand]=\"labelExpand\" [labelCollapse]=\"labelCollapse\"\n                           class=\"ui-widget-content\"\n                           [ngClass]=\"{'ui-treetable-even':even,'ui-treetable-odd':odd}\"\n                    ></tbody>\n                </table>\n            </div>\n            <ay-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\"\n                          styleClass=\"ui-paginator-bottom\"\n                          (onPageChange)=\"paginate($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                          *ngIf=\"paginator\"></ay-paginator>\n            <div class=\"ui-treetable-footer ui-widget-header\" *ngIf=\"footer\">\n                <ng-content select=\"ay-footer\"></ng-content>\n            </div>\n        </div>\n    `\n})\nexport class TreeTable implements OnInit, OnDestroy, AfterViewInit, OnChanges {\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() totalRecords: number;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: number[];\n\n    @Input() first: number = 0;\n\n    @Input() lazy: boolean;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() value: TreeNode[];\n\n    @Input() selectionMode: string;\n\n    @Input() selection: any;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelExpand: string = \"Expand\";\n\n    @Input() labelCollapse: string = \"Collapse\";\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() contextMenu: any;\n\n    @Input() globalFilter: any;\n\n    @Input() filterDelay: number = 300;\n\n    @Input() immutable: boolean;\n\n    @Input() rowStyleClass: Function;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(Header) header: Header;\n\n    @ContentChild(Footer) footer: Footer;\n\n    @ContentChildren(Column) columns: QueryList<Column>;\n\n    public rowTouched: boolean;\n    public loading: boolean;\n    public stopFilterPropagation: boolean;\n    public dataToRender: any[];\n    public filterTimeout: any;\n    public filteredValue: any[];\n    globalFilterFunction: any;\n\n    constructor(public renderer: Renderer2) {\n    }\n\n    onRowClick(event: MouseEvent, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        if (eventTarget.className && eventTarget.className.indexOf('ui-treetable-toggler') === 0) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    this.propagateSelectionDown(node, false);\n                    if (node.parent) {\n                        this.propagateSelectionUp(node.parent, false);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.propagateSelectionDown(node, true);\n                    if (node.parent) {\n                        this.propagateSelectionUp(node.parent, true);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else {\n                if (metaSelection) {\n                    let metaKey = (event.metaKey || event.ctrlKey);\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection.splice(index, 1);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection || [];\n                            this.selection.push(node);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection.splice(index, 1);\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = this.selection || [];\n                            this.selection.push(node);\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    onRowTouchEnd() {\n        this.rowTouched = true;\n    }\n\n    onRowRightClick(event: MouseEvent, node: TreeNode) {\n        if (this.contextMenu) {\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n\n            if (!selected) {\n                if (this.isSingleSelectionMode()) {\n                    this.selection = node;\n                }\n                else if (this.isMultipleSelectionMode()) {\n                    this.selection = [];\n                    this.selection.push(node);\n                    this.selectionChange.emit(this.selection);\n                }\n\n                this.selectionChange.emit(this.selection);\n            }\n\n            this.contextMenu.show(event);\n            this.onContextMenuSelect.emit({originalEvent: event, node: node});\n        }\n    }\n\n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                index = (this.selection == node) ? 0 : -1;\n            }\n            else {\n                for (let i = 0; i < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedCount: number = 0;\n            let childPartialSelected: boolean = false;\n            for (let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n\n            if (select && selectedCount == node.children.length) {\n                this.selection = this.selection || [];\n                this.selection.push(node);\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection.splice(index, 1);\n                    }\n                }\n\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n\n        if (select && index == -1) {\n            this.selection = this.selection || [];\n            this.selection.push(node);\n        }\n        else if (!select && index > -1) {\n            this.selection.splice(index, 1);\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n\n    getRowStyleClass(rowData: any) {\n        let styleClass = '';\n        if (this.rowStyleClass) {\n            let rowClass = this.rowStyleClass.call(this, rowData);\n            if (rowClass) {\n                styleClass += ' ' + rowClass;\n            }\n        }\n        return styleClass;\n    }\n\n    hasFooter() {\n        if (this.columns) {\n            let columnsArr = this.columns.toArray();\n            for (let i = 0; i < columnsArr.length; i++) {\n                if (columnsArr[i].footer) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    ngOnInit() {\n        if (this.immutable) this.handleDataChange();\n    }\n\n    ngAfterViewInit() {\n        if (this.globalFilter && this.value) {\n            this.globalFilterFunction = this.renderer.listen(this.globalFilter, 'keyup', () => {\n                this.filterTimeout = setTimeout(() => {\n                    this.filter();\n                    this.filterTimeout = null;\n                }, this.filterDelay);\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && this.value && !this.immutable) {\n            this.handleDataChange();\n        }\n    }\n\n    shownColumns() {\n        return this.columns.filter(col => !col.hidden)\n    }\n\n    handleDataChange() {\n        if (this.paginator) {\n            this.updatePaginator();\n        }\n        this.updateDataToRender(this.filteredValue || this.value);\n    }\n\n    updatePaginator() {\n        this.totalRecords = this.lazy ? this.totalRecords : (this.value ? this.value.length : 0);\n        if (this.totalRecords && this.first >= this.totalRecords) {\n            let numberOfPages = Math.ceil(this.totalRecords / this.rows);\n            this.first = Math.max((numberOfPages - 1) * this.rows, 0);\n        }\n    }\n\n    paginate(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.stopFilterPropagation = true;\n        }\n        else {\n            this.updateDataToRender(this.filteredValue || this.value);\n        }\n\n    }\n\n    updateDataToRender(datasource) {\n        if ((this.paginator || this.virtualScroll) && datasource) {\n            this.dataToRender = [];\n            let startIndex: number = this.lazy ? 0 : this.first;\n            let endIndex: number = this.virtualScroll ? this.first + this.rows * 2 : startIndex + this.rows;\n\n            for (let i = startIndex; i < endIndex; i++) {\n                if (i >= datasource.length) {\n                    break;\n                }\n\n                this.dataToRender.push(datasource[i]);\n            }\n        }\n        else {\n            this.dataToRender = datasource;\n        }\n\n        this.loading = false;\n    }\n\n    filterFields(object) {\n        let res = false;\n        this.columns.toArray().map(col => {\n            if (!res && object[col.field]) {\n                res = object[col.field].toString().toLowerCase().includes(this.globalFilter.value.toString().toLowerCase())\n            }\n        });\n        return res;\n    }\n\n    filterChildren(children, parent) {\n        let res = false;\n        if (children) {\n            children.map(child => {\n                let _fields = this.filterFields(child.data);\n                let _children = this.filterChildren(child.children, child);\n                res = _fields || _children || res;\n            });\n            parent.expanded = res;\n        }\n        return res;\n    }\n\n    isFiltered(node) {\n        if (this.globalFilter) {\n            return this.filterFields(node.data) || this.filterChildren(node.children, node)\n        } else {\n            return true;\n        }\n    }\n\n    filter() {\n        this.first = 0;\n\n        this.filteredValue = this.value.filter(val => {\n            return this.filterFields(val.data) || this.filterChildren(val.children, val);\n        });\n\n        if (this.paginator) {\n            this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n        }\n\n        this.updateDataToRender(this.filteredValue || this.value);\n    }\n\n    filterConstraints = {\n\n        startsWith(value, filter): boolean {\n            if (filter === undefined || filter === null || filter.trim() === '') {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            let filterValue = filter.toString().toLowerCase();\n            return value.toString().toLowerCase().slice(0, filterValue.length) === filterValue;\n        },\n\n        contains(value, filter): boolean {\n            if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            return value.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n        },\n\n        endsWith(value, filter): boolean {\n            if (filter === undefined || filter === null || filter.trim() === '') {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            let filterValue = filter.toString().toLowerCase();\n            return value.toString().toLowerCase().indexOf(filterValue, value.toString().length - filterValue.length) !== -1;\n        },\n\n        equals(value, filter): boolean {\n            if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            return value.toString().toLowerCase() == filter.toString().toLowerCase();\n        },\n\n        in(value, filter: any[]): boolean {\n            if (filter === undefined || filter === null || filter.length === 0) {\n                return true;\n            }\n\n            if (value === undefined || value === null) {\n                return false;\n            }\n\n            for (let i = 0; i < filter.length; i++) {\n                if (filter[i] === value)\n                    return true;\n            }\n\n            return false;\n        }\n    };\n\n    resolveFieldData(data: any, field: string): any {\n        if (data && field) {\n            if (field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for (let i = 0, len = fields.length; i < len; ++i) {\n                    if (value == null) {\n                        return null;\n                    }\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        //remove event listener\n        if (this.globalFilterFunction) {\n            this.globalFilterFunction();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule, TreeSharedModule, PaginatorModule],\n    exports: [TreeTable, TreeSharedModule, PaginatorModule],\n    declarations: [TreeTable, UITreeRow]\n})\nexport class TreeTableModule {\n}\n"],"names":["Component","selector","template","this","PrimeTemplate","type","console","log","name","Directive","host","TemplateRef","Input","viewContainer","TemplateWrapper","view","createEmbeddedView","templateRef","$implicit","item","index","destroy","ViewContainerRef","EventEmitter","Column","templates","forEach","getType","_this","headerTemplate","bodyTemplate","footerTemplate","filterTemplate","editorTemplate","Output","ContentChildren","ContentChild","Row","ColumnBodyTemplateLoader","column","rowData","rowIndex","ColumnHeaderTemplateLoader","ColumnFooterTemplateLoader","ColumnFilterTemplateLoader","ColumnEditorTemplateLoader","TemplateLoader","data","NgModule","imports","CommonModule","exports","Header","Footer","HeaderColumnGroup","FooterColumnGroup","declarations","treeTable","UITreeRow","node","parent","parentNode","changes","event","expanded","onNodeCollapse","emit","originalEvent","onNodeExpand","preventDefault","leaf","children","length","isSelected","onRowClick","onRowRightClick","onRowTouchEnd","field","indexOf","fields","split","value","i","len","TreeTable","Inject","forwardRef","Paginator","_totalRecords","val","updatePageLinks","_first","_rows","getPage","getPageCount","Math","ceil","totalRecords","rows","numberOfPages","visiblePages","min","pageLinkSize","start","max","end","delta","pageLinks","boundaries","calculatePageLinkBoundaries","push","p","pc","first","state","page","pageCount","onPageChange","floor","changePage","rowsPerPageOptions","target","selectedIndex","changePageToFirst","renderer","startsWith","filter","undefined","trim","filterValue","toString","toLowerCase","slice","contains","endsWith","equals","in","eventTarget","className","selectionMode","selectable","metaSelection","rowTouched","metaKeySelection","findIndexInSelection","selected","isCheckboxSelectionMode","propagateSelectionDown","propagateSelectionUp","selectionChange","selection","onNodeUnselect","onNodeSelect","metaKey","ctrlKey","isSingleSelectionMode","splice","isMultipleSelectionMode","contextMenu","show","onContextMenuSelect","select","selectedCount","childPartialSelected","_a","_i","child","partialSelected","styleClass","rowStyleClass","rowClass","call","columns","columnsArr","toArray","footer","immutable","handleDataChange","globalFilter","globalFilterFunction","listen","filterTimeout","setTimeout","filterDelay","col","hidden","paginator","updatePaginator","updateDataToRender","filteredValue","lazy","stopFilterPropagation","datasource","virtualScroll","dataToRender","startIndex","endIndex","loading","object","res","map","includes","_fields","filterFields","_children","filterChildren","Renderer2","TreeSharedModule","PaginatorModule"],"mappings":"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"}